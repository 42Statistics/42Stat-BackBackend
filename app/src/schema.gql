# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Coalition {
  id: Int!
  name: String!
  slug: String!
  imageUrl: String
  coverUrl: String
  color: String
  score: Int!
  userId: Int!
}

type UserTitle {
  id: Int!
  name: String!
  isSelected: Boolean!
}

type UserScoreRank {
  value: Int!
  rankInCoalition: Int!
  rankInTotal: Int!
}

type UserProfile {
  id: Int!
  login: String!
  grade: String!
  displayname: String!
  coalition: Coalition!
  imgUrl: String
  titles: [UserTitle]!
  level: Float!
}

type UserPreview {
  id: Int!
  login: String!
  imgUrl: String
}

type UserRanking {
  userPreview: UserPreview!
  value: Float
  rank: Int
}

type ProjectPreview {
  id: Int!
  name: String!
  url: URL!
}

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

type TeamPreview {
  id: ID!
  name: String!
  url: URL!
}

type Flag {
  id: ID!
  name: String!
  isPositive: Boolean!
}

type EvalLogHeader {
  corrector: UserPreview!
  teamPreview: TeamPreview!
  beginAt: DateTime!
  projectPreview: ProjectPreview!
  flag: Flag!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type EvalReview {
  mark: Int!
  review: String!
}

type EvalLog {
  header: EvalLogHeader!

  """평가자가 부여한 점수와 리뷰 입니다."""
  correctorReview: EvalReview!

  """피평가자가 부여한 점수와 리뷰 입니다."""
  correctedsReview: EvalReview!
}

type EvalLogsPaginated {
  nodes: [EvalLog]!
  totalCount: Int!
  pageSize: Int!
  pageNumber: Int!
}

type ValueRecord {
  at: DateTime!
  value: Int!
}

type ValuePerCoalition {
  coalition: Coalition!
  value: Int!
}

type ScoreRecordPerCoalition {
  coalition: Coalition!
  records: [ValueRecord]!
}

type HomeCoalition {
  totalScoresPerCoalition: [ValuePerCoalition!]!
  scoreRecordsPerCoalition: [ScoreRecordPerCoalition!]!
  tigCountPerCoalitions: [ValuePerCoalition!]!
}

type IntDateRanged {
  data: Int!
  start: DateTime!
  end: DateTime!
}

type FloatDateRanged {
  data: Float!
  start: DateTime!
  end: DateTime!
}

type StringDateRanged {
  data: String!
  start: DateTime!
  end: DateTime!
}

type HomeEval {
  totalEvalCount: Int!
  evalCountByDateTemplate(dateTemplate: DateTemplate!): IntDateRanged!
  averageEvalCountByDateTemplate(dateTemplate: DateTemplate!): FloatDateRanged!
  averageFeedbackLength: Int!
  averageCommentLength: Int!
}

enum DateTemplate {
  CURR_WEEK
  LAST_WEEK
  CURR_MONTH
  LAST_MONTH
  LAST_YEAR
}

type ProjectRanking {
  projectPreview: ProjectPreview!
  value: Int!
}

type ExamResult {
  rank: Int!
  passCount: Int!
  totalCount: Int!
}

type ExamResultDateRanged {
  data: [ExamResult!]!
  start: DateTime!
  end: DateTime!
}

type HomeTeam {
  currRegisteredCountRank: [ProjectRanking!]!

  """HOME 직전 회차 시험 Rank별 통과율"""
  lastExamResult: ExamResultDateRanged!
}

type IntRate {
  total: Int!
  value: Int!
}

type ValuePerCircle {
  circle: Int!
  value: Int!
}

type UserCountPerLevels {
  userCount: Int!
  level: Int!
}

type HomeUser {
  activeUserCountRecords: [ValueRecord!]!
  userCountPerLevels: [UserCountPerLevels!]!
  memberRate: IntRate!
  blackholedRate: IntRate!
  blackholedCountByDateTemplate(dateTemplate: DateTemplate!): IntDateRanged!
  blackholedCountPerCircles: [ValuePerCircle!]!
  walletRanks(limit: Int! = 5): [UserRanking!]!
  correctionPointRanks(limit: Int! = 5): [UserRanking!]!
  averageCircleDurations: [ValuePerCircle!]!
}

type LeaderboardElement {
  """내 랭킹 정보"""
  me: UserRanking

  """전체 랭킹 정보"""
  totalRanks: [UserRanking!]!
}

type LeaderboardElementDateRanged {
  data: LeaderboardElement!
  start: DateTime!
  end: DateTime!
}

type LeaderboardEval {
  total: LeaderboardElement!
  byDateRange(start: DateTime!, end: DateTime!): LeaderboardElementDateRanged!
  byDateTemplate(dateTemplate: DateTemplate!): LeaderboardElementDateRanged!
}

type LeaderboardExp {
  byDateRange(start: DateTime!, end: DateTime!): LeaderboardElementDateRanged!
  byDateTemplate(dateTemplate: DateTemplate!): LeaderboardElementDateRanged!
}

type LeaderboardLevel {
  total: LeaderboardElement!
}

type LeaderboardScore {
  total: LeaderboardElement!
  byDateRange(start: DateTime!, end: DateTime!): LeaderboardElementDateRanged!
  byDateTemplate(dateTemplate: DateTemplate!): LeaderboardElementDateRanged!
}

type TempTeam {
  id: Int!
  teamName: String!
  projectName: String!
  occurrence: Int!
  finalMark: Int!

  """레지스터"""
  createdAt: DateTime!

  """팀 빌딩"""
  lockedAt: DateTime!

  """제출"""
  closedAt: DateTime!
  isValidated: Boolean!

  """평가완료날"""
  finishedAt: DateTime!

  """상태: 팀빌딩, 진행중, 평가중, 완료"""
  status: String!
}

type PreferredTime {
  total: Int!

  """06 ~ 12"""
  morning: Int!

  """12 ~ 18"""
  daytime: Int!

  """18 ~ 24"""
  evening: Int!

  """24 ~ 06"""
  night: Int!
}

type PreferredTimeDateRanged {
  data: PreferredTime!
  start: DateTime!
  end: DateTime!
}

type TeamInfo {
  lastRegistered: String
  lastPass: String
  teams: [TempTeam]!
}

type LevelGraph {
  date: DateTime!
  userLevel: Float!
  averageLevel: Float!
}

type LevelGraphDateRanged {
  data: [LevelGraph!]!
  start: DateTime!
  end: DateTime!
}

type PersonalGeneral {
  userProfile: UserProfile!
  beginAt: DateTime!
  blackholedAt: DateTime
  wallet: Int!
  scoreInfo: UserScoreRank!
  currMonthLogtime: IntDateRanged!
  lastMonthLogtime: IntDateRanged!
  teamInfo: TeamInfo!
  preferredTime: PreferredTime!
  preferredTimeByDateRange(start: DateTime!, end: DateTime!): PreferredTimeDateRanged!
  preferredCluster: String!
  preferredClusterByDateRange(start: DateTime!, end: DateTime!): StringDateRanged!
  levelGraphs: LevelGraphDateRanged!
  preferredTimeByDateTemplate(dateTemplate: DateTemplate!): PreferredTimeDateRanged!
  preferredClusterByDateTemplate(dateTemplate: DateTemplate!): StringDateRanged!
}

type PersonalEval {
  userProfile: UserProfile!

  """보유 평가 포인트"""
  correctionPoint: Int!

  """월간 평가 횟수 (이번달 + 저번달)"""
  currMonthCount: IntDateRanged!

  """월간 평가 횟수 (이번달 + 저번달)"""
  lastMonthCount: IntDateRanged!

  """누적 평가 횟수"""
  totalCount: Int!

  """누적 평가 시간"""
  totalDuration: Int!

  """평균 평가 시간"""
  averageDuration: Int!

  """평균 평가 점수"""
  averageFinalMark: Float!

  """평균 피드백 길이"""
  averageFeedbackLength: Int!

  """평균 코멘트 길이"""
  averageCommentLength: Int!

  """최근 받은 피드백"""
  latestFeedback: String!

  """이 유저의 이전 평가가 궁금하다면?"""
  evalLogSearchLink: String!
}

type ProjectEvalInfo {
  totalEvalCount: Int!
  passCount: Int!
  failCount: Int!
}

type ProjectInfo {
  id: Int!
  name: String!
  skills: [String]!
  keywords: [String]!
  description: String!
  minUserCount: Int!
  maxUserCount: Int!
  duration: Int!
  difficulty: Int!
  ongoingTeamCount: Int!

  """총 제출 횟수 입니다."""
  closedTeamCount: Int!
  averagePassFinalmark: Int!
  evalInfo: ProjectEvalInfo!
}

type Query {
  findUserPreview(login: String! = ""): [UserPreview]!
  findProjectPreview(name: String! = ""): [ProjectPreview]!
  getHomeUser: HomeUser!
  getHomeEval: HomeEval!
  getHomeCoalition: HomeCoalition!
  getHomeTeam: HomeTeam!
  getLeaderboardLevel: LeaderboardLevel!
  getLeaderboardExpIncrement: LeaderboardExp!
  getLeaderboardEvalCount: LeaderboardEval!
  getLeaderboardScore: LeaderboardScore!
  getEvalLogs(pageSize: Int! = 10, pageNumber: Int! = 1, corrector: String, corrected: String, projectName: String, outstandingOnly: Boolean! = false): EvalLogsPaginated!
  getProjectInfo(projectName: String! = "libft"): ProjectInfo!
  getPersonGeneralPage(userId: Int, login: String): PersonalGeneral!
  getPersonalEvalPage(userId: Int, login: String): PersonalEval!
}