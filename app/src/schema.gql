# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Coalition {
  id: ID!
  name: CoaliltionName!
}

enum CoaliltionName {
  GUN
  GON
  GAM
  LEE
}

type UserTitle {
  id: ID!
  name: String!
  isSelected: Boolean!
}

type ScoreInfo {
  current: Int!
  rankInCoalition: Int!
  rankInTotal: Int!
}

type UserProfile {
  id: ID!
  login: String!
  grade: UserGrade!
  name: String!
  coalition: Coalition
  imgUrl: URL
  titles: [UserTitle]!
  level: Float!
  pooledAt: DateTime!
  blackholedAt: DateTime
  wallet: Int!
  correctionPoint: Int!
  scoreInfo: ScoreInfo!
  levelRank: Int!
}

enum UserGrade {
  LEARNER
  MEMBER
}

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type UserPreview {
  id: ID!
  login: String!
  imgUrl: URL
}

type UserRanking {
  userPreview: UserPreview!
  value: Float!
}

type TempTeam {
  id: ID!
  name: String!
  occurrence: Int!
  closedAt: DateTime
  firstCreatedAt: DateTime!
  finalMark: Int

  """true면 통과, false면 fail, null이면 미평가 입니다."""
  isValidated: Boolean
}

type PreferredTime {
  """06 ~ 12"""
  morning: Int!

  """12 ~ 18"""
  daytime: Int!

  """18 ~ 24"""
  evening: Int!

  """24 ~ 06"""
  night: Int!
}

type LogtimeInfo {
  currMonthLogtime: Int!
  lastMonthLogtime: Int!
  preferredTime: PreferredTime!
  preferredCluster: String!
}

type TeamInfo {
  lastRegistered: String
  lastPass: String
  teams: [TempTeam]!
}

type DestinyUser {
  id: ID!
  login: String!
  imgUrl: URL
  score: Int!
}

type EvalUserInfo {
  totalEvalCnt: Int!
  difficulty: EvalUserDifficulty!
  destinyUsers: [DestinyUser]!
}

enum EvalUserDifficulty {
  EASY
  MEDIUM
  HARD
  HELL
}

type LevelGraph {
  date: DateTime!
  userLevel: Float!
  averageLevel: Float!
}

type PersonalGeneral {
  evalUserInfo: EvalUserInfo!
  logtimeInfo: LogtimeInfo!
  teamInfo: TeamInfo!
  levelGraphs: [LevelGraph!]!
  userProfile: UserProfile!
}

type ProjectPreview {
  id: ID!
  name: String!
}

type ProjectRanking {
  projectPreview: ProjectPreview!
  value: Int!
}

type TeamPreview {
  id: ID!
  name: String!
  url: URL!
}

type Corrector {
  id: ID!
  login: String!
  imgUrl: URL
  comment: String!

  """피평가자가 평가자에게 5점 만점 중 몇 점을 주었는가 입니다."""
  correctorRate: Int!
}

type Flag {
  id: ID!
  name: String!
  isPositive: Boolean!
}

type PersonalScaleTeam {
  corrector: Corrector!

  """피평가자의 피드백 입니다."""
  feedback: String!
  beginAt: DateTime!
  finalMark: Int!
  flag: Flag!
  projectPreview: ProjectPreview!
  teamPreview: TeamPreview!
}

type PersonalScaleTeamEdge {
  cursor: String!
  node: PersonalScaleTeam!
}

type PageInfo {
  hasNextPage: Boolean!
  endCursor: String!
}

type PersonalScaleTeamsPaginated {
  edges: [PersonalScaleTeamEdge!]
  totalCount: Int!
  pageInfo: PageInfo!
}

type EvalProfile {
  currMonthCnt: Int!
  lastMonthCnt: Int!
  averageDuration: Int!

  """평가자 기준으로 준 평균 점수 입니다."""
  averageFinalMark: Float!

  """평가자, 피평가자 모두 포함해서 계산된 값 입니다."""
  averageFeedbackLength: Int!
}

type PersonalEval {
  evalProfile: EvalProfile!
  userProfile: UserProfile!
  scaleTeams(first: Int! = 10, after: String! = "0", evalUserType: Int! = 0, subjectName: String, targetUserName: String, outstandingOnly: Boolean): PersonalScaleTeamsPaginated!
}

type ExamResult {
  rank: Int!
  passCnt: Int!
  totalCnt: Int!
}

type Home {
  currWeekEvalCnt: Int!
  lastWeekEvalCnt: Int!
  currMonthBlackholedCnt: Int!
  lastMonthBlackholedCnt: Int!
  currRegisteredCntRank: [ProjectRanking!]!
  monthlyExpIncrementRank: [UserRanking!]!
  monthlyAccessTimeRank: [UserRanking!]!
  totalEvalCntRank: [UserRanking!]!
  levelRank: [UserRanking!]!
  lastExamResult: [ExamResult!]!
}

type ProjectInfo {
  id: ID!
  name: String!
  skills: [String]!
  averagePassFinalmark: Int!
  averageDurationTime: Int!

  """총 제출 횟수 입니다."""
  totalCloseCnt: Int!
  currRegisteredCnt: Int!
  passPercentage: Int!
  totalEvalCnt: Int!
}

type ValueRecord {
  at: DateTime!
  value: Int!
}

type ValuePerCircle {
  circle: Int!
  value: Int!
}

type TotalScore {
  coalition: Coalition!
  score: Int!
}

type ScoreRecords {
  coalition: Coalition!
  records: [ValueRecord!]!
}

type UserCntPerPoint {
  userCnt: Int!
  point: Int!
}

type EvalCntPerPoint {
  evalCnt: Int!
  point: Int!
}

type UserCntPerLevel {
  userCnt: Int!
  level: Int!
}

type Total {
  activeUserCntRecords: [ValueRecord!]!
  blackholedCntPerCircles: [ValuePerCircle!]!
  totalScores: [TotalScore!]!
  correctionPointRanks: [UserRanking!]!
  walletRanks: [UserRanking!]!
  monthlyScoreRanks: [UserRanking!]!
  totalEvalCnt: Int!
  averageFeedbackLength: Int!
  averageCircleDurations: [ValuePerCircle!]!
  scoreRecords: [ScoreRecords!]!
  userCntPerPoints: [UserCntPerPoint!]!
  evalCntPerPoints: [EvalCntPerPoint!]!
  userCntPerLevels: [UserCntPerLevel!]!
  projectInfo(projectName: String! = "libft"): ProjectInfo!
}

type Query {
  getPersonalEvalPage: PersonalEval!
  getPersonGeneralPage: PersonalGeneral!
  getHomePage: Home!
  getTotalPage: Total!
}