# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Coalition {
  id: Int!
  name: String!
  slug: String!
  imageUrl: String
  coverUrl: String
  color: String
  score: Int!
  userId: Int!
}

type UserTitle {
  id: Int!
  name: String!
  isSelected: Boolean!
}

type UserScoreRank {
  value: Int!
  rankInCoalition: Int!
  rankInTotal: Int!
}

type UserProfile {
  id: Int!
  login: String!
  grade: String!
  displayname: String!
  coalition: Coalition!
  imgUrl: String
  titles: [UserTitle]!
  level: Float!
}

type UserPreview {
  id: Int!
  login: String!
  imgUrl: String
}

type UserRanking {
  userPreview: UserPreview!
  value: Float
  rank: Int
}

type UserRankingDateRanged {
  data: [UserRanking!]!
  from: DateTime!
  to: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type ProjectPreview {
  id: Int!
  name: String!
  url: URL!
}

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

type TeamPreview {
  id: ID!
  name: String!
  url: URL!
}

type Flag {
  id: ID!
  name: String!
  isPositive: Boolean!
}

type EvalLogHeader {
  corrector: UserPreview!
  teamPreview: TeamPreview!
  beginAt: DateTime!
  projectPreview: ProjectPreview!
  flag: Flag!
}

type EvalReview {
  mark: Int!
  review: String!
}

type EvalLog {
  header: EvalLogHeader!

  """평가자가 부여한 점수와 리뷰 입니다."""
  correctorReview: EvalReview!

  """피평가자가 부여한 점수와 리뷰 입니다."""
  correctedsReview: EvalReview!
}

type EvalLogsPaginated {
  nodes: [EvalLog]!
  totalCount: Int!
  pageSize: Int!
  pageNumber: Int!
}

type ProjectInfo {
  id: ID!
  name: String!
  skills: [String]!
  averagePassFinalmark: Int!
  averageDurationTime: Int!

  """총 제출 횟수 입니다."""
  totalCloseCount: Int!
  currRegisteredCount: Int!
  passPercentage: Int!
  totalEvalCount: Int!
}

type ValueRecord {
  at: DateTime!
  value: Int!
}

type ValuePerCircle {
  circle: Int!
  value: Int!
}

type UserCountPerLevels {
  userCount: Int!
  level: Int!
}

type Total {
  projectInfo(projectName: String! = "libft"): ProjectInfo!

  " "
  monthlyScoreRanks: UserRankingDateRanged!
}

type CoalitionPerValue {
  coalition: Coalition!
  value: Int!
}

type CoalitionScoreRecords {
  coalition: Coalition!
  records: [ValueRecord]!
}

type NumberDateRanged {
  data: Int!
  from: DateTime!
  to: DateTime!
}

type StringDateRanged {
  data: String!
  from: DateTime!
  to: DateTime!
}

type ProjectRanking {
  projectPreview: ProjectPreview!
  value: Int!
}

type ExamResult {
  rank: Int!
  passCount: Int!
  totalCount: Int!
}

type ExamResultDateRanged {
  data: [ExamResult!]!
  from: DateTime!
  to: DateTime!
}

type Home {
  """HOME 주간 총 평가 횟수 (이번 주 + 지난 주)"""
  currWeekEvalCount: NumberDateRanged!

  """HOME 주간 총 평가 횟수 (이번 주 + 지난 주)"""
  lastWeekEvalCount: NumberDateRanged!

  """HOME 월간 누적 블랙홀 인원 (이번 달 + 지난 달)"""
  lastMonthBlackholedCount: NumberDateRanged!

  """HOME 월간 누적 블랙홀 인원 (이번 달 + 지난 달)"""
  currMonthBlackholedCount: NumberDateRanged!

  """HOME 지금 가장 많은 사람이 참여하는 과제"""
  currRegisteredCountRank: [ProjectRanking!]!

  """HOME 직전 회차 시험 Rank별 통과율"""
  lastExamResult: ExamResultDateRanged!

  """HOME 역대 코알리숑 스코어 합산"""
  totalScores: [CoalitionPerValue!]!

  """HOME 코알리숑별 역대 코알리숑 스코어 변동 추이"""
  scoreRecords: [CoalitionScoreRecords!]!

  """HOME 역대 총 평가 횟수"""
  totalEvalCount: Int!

  """HOME 평균 피드백 길이"""
  averageFeedbackLength: Int!

  """HOME 평균 코멘트 길이"""
  averageCommentLength: Int!
  userCountPerLevels: [UserCountPerLevels!]!

  """HOME 보유 월렛 랭킹"""
  walletRanks(limit: Int! = 5): [UserRanking!]!

  """HOME 보유 평가 포인트 랭킹"""
  correctionPointRanks(limit: Int! = 5): [UserRanking!]!

  """HOME 전체/유저별 서클 통과 평균 기간 (uid?: number)"""
  averageCircleDurations(uid: Int): [ValuePerCircle!]!

  """HOME 언제 블랙홀에 많이 빠질까"""
  blackholedCountPerCircles: [ValuePerCircle!]!

  """HOME 활성화 유저 수 추이"""
  activeUserCountRecords: [ValueRecord!]!

  """HOME 주간 1인당 평가 횟수 [주간 평가 횟수, 활동 유저 수]"""
  currWeekAverageEvalCount: [Int!]!

  """HOME 멤버 비율 [멤버 유저 수, 전체 유저 수]"""
  memberPercentage: [Int!]!

  """HOME 블랙홀 유저 비율 [블랙홀 유저 수, 전체 유저 수]"""
  blackholedPercentage: [Int!]!

  """HOME 이번 달 누적 코알리숑 티그 횟수"""
  tigCountPerCoalitions: [CoalitionPerValue!]!
}

type TempTeam {
  id: Int!
  teamName: String!
  projectName: String!
  occurrence: Int!
  finalMark: Int!

  """레지스터"""
  createdAt: DateTime!

  """팀 빌딩"""
  lockedAt: DateTime!

  """제출"""
  closedAt: DateTime!
  isValidated: Boolean!

  """평가완료날"""
  finishAt: DateTime!

  """상태: 팀빌딩, 진행중, 평가중, 완료"""
  status: String!
}

type PreferredTime {
  total: Int!

  """06 ~ 12"""
  morning: Int!

  """12 ~ 18"""
  daytime: Int!

  """18 ~ 24"""
  evening: Int!

  """24 ~ 06"""
  night: Int!
}

type TeamInfo {
  lastRegistered: String
  lastPass: String
  teams: [TempTeam]!
}

type LevelGraph {
  date: DateTime!
  userLevel: Float!
  averageLevel: Float!
}

type LevelGraphDateRanged {
  data: [LevelGraph!]!
  from: DateTime!
  to: DateTime!
}

type PreferredTimeDateRanged {
  data: PreferredTime!
  from: DateTime!
  to: DateTime!
}

type PersonalGeneral {
  userProfile: UserProfile!
  beginAt: DateTime!
  blackholedAt: DateTime
  wallet: Int!
  scoreInfo: UserScoreRank!
  currMonthLogtime: NumberDateRanged!
  lastMonthLogtime: NumberDateRanged!
  preferredTime: PreferredTimeDateRanged!
  preferredCluster(start: DateTime, end: DateTime): StringDateRanged!
  teamInfo: TeamInfo!
  levelGraphs: LevelGraphDateRanged!
}

type PersonalEval {
  userProfile: UserProfile!

  """보유 평가 포인트"""
  correctionPoint: Int!

  """월간 평가 횟수 (이번달 + 저번달)"""
  currMonthCount: NumberDateRanged!

  """월간 평가 횟수 (이번달 + 저번달)"""
  lastMonthCount: NumberDateRanged!

  """누적 평가 횟수"""
  totalCount: Int!

  """누적 평가 시간"""
  totalDuration: Int!

  """평균 평가 시간"""
  averageDuration: Int!

  """평균 평가 점수"""
  averageFinalMark: Float!

  """평균 피드백 길이"""
  averageFeedbackLength: Int!

  """평균 코멘트 길이"""
  averageCommentLength: Int!

  """최근 받은 피드백"""
  latestFeedback: String!

  """이 유저의 이전 평가가 궁금하다면?"""
  evalLogSearchLink: String!
}

type LeaderboardElement {
  """내 랭킹 정보"""
  me: UserRanking

  """전체 랭킹 정보"""
  totalRanks: [UserRanking!]!
}

type LeaderboardElementDateRanged {
  data: LeaderboardElement!
  from: DateTime!
  to: DateTime!
}

type LeaderboardEval {
  total: LeaderboardElement!
  byDateRange(start: DateTime!, end: DateTime!): LeaderboardElementDateRanged!
  byDateTemplate(dateTemplate: DateTemplate!): LeaderboardElementDateRanged!
}

enum DateTemplate {
  WEEKLY
  MONTHLY
}

type LeaderboardExp {
  byDateRange(start: DateTime!, end: DateTime!): LeaderboardElementDateRanged!
  byDateTemplate(dateTemplate: DateTemplate!): LeaderboardElementDateRanged!
}

type LeaderboardLevel {
  total: LeaderboardElement!
}

type LeaderboardScore {
  total: LeaderboardElement!
  byDateRange(start: DateTime!, end: DateTime!): LeaderboardElementDateRanged!
  byDateTemplate(dateTemplate: DateTemplate!): LeaderboardElementDateRanged!
}

type Query {
  findProjectPreview(name: String! = ""): [ProjectPreview]!
  getHomePage: Home!
  findUserPreview(login: String! = ""): [UserPreview]!
  getTotalPage: Total!
  getPersonGeneralPage(uid: Int, login: String): PersonalGeneral!
  getPersonalEvalPage(uid: Int, login: String): PersonalEval!
  getLeaderboardLevel: LeaderboardLevel!
  getLeaderboardExpIncrement: LeaderboardExp!
  getLeaderboardEvalCount: LeaderboardEval!
  getLeaderboardScore: LeaderboardScore!
  getEvalLogs(pageSize: Int! = 10, pageNumber: Int! = 1, corrector: String, corrected: String, projectName: String, outstandingOnly: Boolean! = false): EvalLogsPaginated!
}