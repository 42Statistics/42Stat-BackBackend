# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Coalition {
  id: Int!
  name: String!
  slug: String!
  imageUrl: String
  coverUrl: String
  color: String
  score: Int!

  """코알리숑 마스터의 user id 입니다."""
  userId: Int!
}

type UserTitle {
  titleId: Int!
  name: String!
  selected: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type UserProfile {
  id: Int!
  login: String!
  imgUrl: String
  grade: String!
  displayname: String!
  coalition: Coalition!
  titles: [UserTitle]!
  level: Float!
}

type UserPreview {
  id: Int!
  login: String!
  imgUrl: String
}

type UserRank {
  userPreview: UserPreview!
  value: Float!
  rank: Int!
}

type UserRankingIndexPaginated {
  nodes: [UserRank]!
  totalCount: Int!
  pageSize: Int!
  pageNumber: Int!
}

type ProjectPreview {
  id: Int!
  name: String!
  url: URL!
}

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

type CursorPageInfo {
  totalCount: Int!
  hasNextPage: Boolean!
  endCursor: String
}

type TeamPreview {
  id: Int!
  name: String!
  url: String!
}

type Flag {
  id: Int!
  name: String!
  isPositive: Boolean!
}

type EvalLogHeader {
  corrector: UserPreview!
  teamPreview: TeamPreview!
  beginAt: DateTime!
  projectPreview: ProjectPreview!
  flag: Flag!
}

type EvalReview {
  mark: Int!
  review: String!
}

type EvalLog {
  id: Int!
  header: EvalLogHeader!
  correctorReview: EvalReview!
  correctedsReview: EvalReview
}

type EvalLogEdge {
  cursor: String!
  node: EvalLog!
}

type EvalLogsPaginated {
  edges: [EvalLogEdge]!
  pageInfo: CursorPageInfo
}

type IntRecord {
  at: DateTime!
  value: Int!
}

type IntPerCoalition {
  coalition: Coalition!
  value: Int!
}

type IntPerCoalitionDateRanged {
  data: [IntPerCoalition!]!
  start: DateTime!
  end: DateTime!
}

type ScoreRecordPerCoalition {
  coalition: Coalition!
  records: [IntRecord]!
}

type HomeCoalition {
  totalScoresPerCoalition: [IntPerCoalition!]!
  scoreRecordsPerCoalition: [ScoreRecordPerCoalition!]!
  tigCountPerCoalitionByDateTemplate(dateTemplate: DateTemplate!): IntPerCoalitionDateRanged!
}

enum DateTemplate {
  CURR_WEEK
  LAST_WEEK
  CURR_MONTH
  LAST_MONTH
  LAST_YEAR
  TOTAL
}

type IntDateRanged {
  data: Int!
  start: DateTime!
  end: DateTime!
}

type FloatDateRanged {
  data: Float!
  start: DateTime!
  end: DateTime!
}

type HomeEval {
  evalCountByDateTemplate(dateTemplate: DateTemplate!): IntDateRanged!
  averageEvalCountByDateTemplate(dateTemplate: DateTemplate!): FloatDateRanged!
  averageFeedbackLength: Int!
  averageCommentLength: Int!
}

type Pair {
  key: String!
  value: Int!
}

type Rate {
  total: Int!
  fields: [Pair!]!
}

type UserTeam {
  id: Int!
  name: String!
  occurrence: Int!
  projectPreview: ProjectPreview!
  status: TeamStatus!
  lastEventTime: DateTime!
  isValidated: Boolean
  finalMark: Int
}

enum TeamStatus {
  REGISTERED
  IN_PROGRESS
  WAITING_FOR_CORRECTION
  FINISHED
}

type PreferredTime {
  total: Int!

  """06 ~ 12"""
  morning: Int!

  """12 ~ 18"""
  daytime: Int!

  """18 ~ 24"""
  evening: Int!

  """24 ~ 06"""
  night: Int!
}

type PreferredTimeDateRanged {
  data: PreferredTime!
  start: DateTime!
  end: DateTime!
}

type PreferredCluster {
  name: String
}

type PreferredClusterDateRanged {
  data: PreferredCluster!
  start: DateTime!
  end: DateTime!
}

type TeamInfo {
  lastRegistered: String
  lastPassed: String
  teams: [UserTeam]!
}

type LevelRecord {
  monthsPassed: Int!
  level: Float!
}

type UserScoreInfo {
  value: Int!
  rankInCoalition: Int!
  rankInTotal: Int!
}

type CharacterEffort {
  logtimeRank: UserRank!
  evalCountRank: UserRank!
  examTryCount: Int!
  projectTryCount: Int!
}

type CharacterTalent {
  levelRank: UserRank!
  examOneshotRate: Rate!
  projectOneshotRate: Rate!
  outstandingRate: Rate!
}

type Character {
  effort: CharacterEffort!
  talent: CharacterTalent!
}

type PersonalGeneral {
  userProfile: UserProfile!
  beginAt: DateTime!
  blackholedAt: DateTime
  wallet: Int!
  scoreInfo: UserScoreInfo!
  logtimeByDateTemplate(dateTemplate: DateTemplate!): IntDateRanged!
  preferredTimeByDateTemplate(dateTemplate: DateTemplate!): PreferredTimeDateRanged!
  preferredClusterByDateTemplate(dateTemplate: DateTemplate!): PreferredClusterDateRanged!
  teamInfo: TeamInfo!
  userLevelRecords: [LevelRecord]!
  memberLevelRecords: [LevelRecord!]!
  character: Character
}

type ProjectRank {
  projectPreview: ProjectPreview!
  value: Int!
  rank: Int!
}

type ResultPerRank {
  rank: Int!
  rate: Rate!
}

type ExamResult {
  resultPerRank: [ResultPerRank!]!
  beginAt: DateTime!
  endAt: DateTime!
  location: String!
  maxPeople: Int!
  name: String!
  nbrSubscribers: Int!
}

type ExamResultDateRanged {
  data: ExamResult!
  start: DateTime!
  end: DateTime!
}

type HomeTeam {
  currRegisteredCountRanking(limit: Int! = 3): [ProjectRank!]!
  recentExamResult(after: Int! = 0): ExamResultDateRanged!
}

type IntPerCircle {
  circle: Int!
  value: Int!
}

type UserCountPerLevel {
  value: Int!
  level: Int!
}

type HomeUser {
  aliveUserCountRecords: [IntRecord!]!
  userCountPerLevel: [UserCountPerLevel!]!
  memberRate: Rate!
  blackholedRate: Rate!
  blackholedCountByDateTemplate(dateTemplate: DateTemplate!): IntDateRanged!
  blackholedCountPerCircle: [IntPerCircle!]!
  walletRanking(limit: Int! = 5): [UserRank!]!
  correctionPointRanking(limit: Int! = 5): [UserRank!]!
  averageDurationPerCircle: [IntPerCircle!]!
}

"""누적 데이터 기준입니다."""
type Landing {
  daysAfterBeginAt: Int!
  aliveCount: Int!
  blackholedCount: Int!
  memberCount: Int!
  evalCount: Int!
  trendingProject: ProjectRank!
}

type LeaderboardElement {
  """내 랭킹 정보"""
  me: UserRank

  """전체 랭킹 정보"""
  totalRanking: UserRankingIndexPaginated!
}

type LeaderboardElementDateRanged {
  data: LeaderboardElement!
  start: DateTime!
  end: DateTime!
}

type LeaderboardEval {
  """Available DateTemplate=[TOTAL, CURR_MONTH, CURR_WEEK]"""
  byDateTemplate(pageSize: Int! = 10, pageNumber: Int! = 1, dateTemplate: DateTemplate!): LeaderboardElementDateRanged!
}

type LeaderboardExp {
  """Available DateTemplate=[CURR_MONTH, CURR_WEEK]"""
  byDateTemplate(pageSize: Int! = 10, pageNumber: Int! = 1, dateTemplate: DateTemplate!): LeaderboardElementDateRanged!
}

type LeaderboardLevel {
  """Available DateTemplate=[TOTAL]"""
  byDateTemplate(pageSize: Int! = 10, pageNumber: Int! = 1, dateTemplate: DateTemplate!): LeaderboardElementDateRanged!
}

type LeaderboardScore {
  """Available DateTemplate=[TOTAL, CURR_WEEK, CURR_MONTH]"""
  byDateTemplate(pageSize: Int! = 10, pageNumber: Int! = 1, dateTemplate: DateTemplate!): LeaderboardElementDateRanged!
}

type MyInfo {
  userPreview: UserPreview!
  isNewMember: Boolean!
  recentValidatedTeam: UserTeam
  blackholedAt: DateTime
  experienceRank: Int
  scoreRank: Int
  evalCountRank: Int
}

type PersonalEval {
  userProfile: UserProfile!
  correctionPoint: Int!
  totalCount: Int!
  countByDateTemplate(dateTemplate: DateTemplate!): IntDateRanged!
  totalDuration: Int!
  averageDuration: Int!
  averageFinalMark: Float!
  averageFeedbackLength: Int!
  averageCommentLength: Int!
  destinyRanking(limit: Int! = 5): [UserRank]!
  recentComment: String
}

type ProjectInfo {
  id: Int!
  name: String!
  objectives: [String]!
  skills: [String]!
  description: String!
  minUserCount: Int!
  maxUserCount: Int!
  estimateTime: String
  difficulty: Int
  currRegisteredTeamCount: Int!

  """총 제출 횟수 입니다."""
  closedTeamCount: Int!
  averagePassFinalMark: Int!
  validatedRate: Rate!
}

type Query {
  findUserPreview(login: String! = "", limit: Int! = 10): [UserPreview]!
  findProjectPreview(name: String! = ""): [ProjectPreview]!
  getLanding: Landing!
  getMyInfo: MyInfo!
  getHomeUser: HomeUser!
  getHomeEval: HomeEval!
  getHomeCoalition: HomeCoalition!
  getHomeTeam: HomeTeam!
  getPersonalGeneral(login: String, userId: Int): PersonalGeneral!
  getPersonalEval(userId: Int, login: String): PersonalEval!
  getProjectInfo(projectName: String! = "Libft"): ProjectInfo!
  getLeaderboardLevel: LeaderboardLevel!
  getLeaderboardExpIncrement: LeaderboardExp!
  getLeaderboardEvalCount: LeaderboardEval!
  getLeaderboardScore: LeaderboardScore!
  getEvalLogs(after: String, first: Int! = 20, corrector: String, corrected: String, projectName: String, outstandingOnly: Boolean! = false, sortOrder: EvalLogSortOrder! = BEGIN_AT_DESC): EvalLogsPaginated!
}

enum EvalLogSortOrder {
  BEGIN_AT_ASC
  BEGIN_AT_DESC
}