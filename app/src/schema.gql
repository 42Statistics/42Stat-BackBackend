# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Coalition {
  id: Int!
  name: String!
  slug: String!
  imageUrl: String
  coverUrl: String
  color: String
  score: Int!
  userId: Int!
}

type UserTitle {
  id: ID!
  name: String!
  isSelected: Boolean!
}

type UserScoreInfo {
  value: Int!
  rankInCoalition: Int!
  rankInTotal: Int!
}

type UserProfile {
  id: ID!
  login: String!
  grade: String!
  name: String!
  coalition: Coalition
  imgUrl: URL
  titles: [UserTitle]!
  level: Float!
  pooledAt: DateTime!
  blackholedAt: DateTime
  wallet: Int!
  correctionPoint: Int!
  scoreInfo: UserScoreInfo!
  levelRank: Int!
}

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type UserPreview {
  id: ID!
  login: String!
  imgUrl: URL
}

type UserRanking {
  userPreview: UserPreview!
  value: Float!
}

type UserRankingDateRanged {
  data: [UserRanking!]!
  from: DateTime!
  to: DateTime!
}

type ProjectPreview {
  id: ID!
  name: String!
  url: URL!
}

type TeamPreview {
  id: ID!
  name: String!
  url: URL!
}

type Flag {
  id: ID!
  name: String!
  isPositive: Boolean!
}

type EvalLogHeader {
  corrector: UserPreview!
  teamPreview: TeamPreview!
  beginAt: DateTime!
  projectPreview: ProjectPreview!
  flag: Flag!
}

type EvalReview {
  mark: Int!
  review: String!
}

type EvalLog {
  header: EvalLogHeader!

  """평가자가 부여한 점수와 리뷰 입니다."""
  correctorReview: EvalReview!

  """피평가자가 부여한 점수와 리뷰 입니다."""
  correctedsReview: EvalReview!
}

type EvalLogsPaginated {
  nodes: [EvalLog]!
  totalCount: Int!
  pageSize: Int!
  pageNumber: Int!
}

type NumberDateRanged {
  data: Int!
  from: DateTime!
  to: DateTime!
}

type ProjectRanking {
  projectPreview: ProjectPreview!
  value: Int!
}

type ExamResult {
  rank: Int!
  passCnt: Int!
  totalCnt: Int!
}

type ExamResultDateRanged {
  data: [ExamResult!]!
  from: DateTime!
  to: DateTime!
}

type Home {
  currMonthBlackholedCnt: NumberDateRanged!
  lastMonthBlackholedCnt: NumberDateRanged!
  currRegisteredCntRank: [ProjectRanking!]!
  monthlyExpIncrementRank: [UserRanking!]!
  monthlyAccessTimeRank: [UserRanking!]!
  totalEvalCntRank: [UserRanking!]!
  levelRank: [UserRanking!]!
  lastExamResult: ExamResultDateRanged!
  currWeekEvalCnt: NumberDateRanged!
  lastWeekEvalCnt: NumberDateRanged!
  monthlyEvalCntRank: UserRankingDateRanged!
}

type TempTeam {
  id: ID!
  name: String!
  occurrence: Int!
  closedAt: DateTime
  firstCreatedAt: DateTime!
  finalMark: Int

  """true면 통과, false면 fail, null이면 미평가 입니다."""
  isValidated: Boolean
}

type PreferredTime {
  """06 ~ 12"""
  morning: Int!

  """12 ~ 18"""
  daytime: Int!

  """18 ~ 24"""
  evening: Int!

  """24 ~ 06"""
  night: Int!
}

type LogtimeInfo {
  currMonthLogtime: Int!
  lastMonthLogtime: Int!
  preferredTime: PreferredTime!
  preferredCluster: String!
}

type LogtimeInfoDateRanged {
  data: LogtimeInfo!
  from: DateTime!
  to: DateTime!
}

type TeamInfo {
  lastRegistered: String
  lastPass: String
  teams: [TempTeam]!
}

type LevelGraph {
  date: DateTime!
  userLevel: Float!
  averageLevel: Float!
}

type LevelGraphDateRanged {
  data: [LevelGraph!]!
  from: DateTime!
  to: DateTime!
}

type PersonalGeneral {
  logtimeInfo: LogtimeInfoDateRanged!
  teamInfo: TeamInfo!
  levelGraphs: LevelGraphDateRanged!
  userProfile: UserProfile!
}

type PersonalEval {
  currMonthCount: NumberDateRanged!
  lastMonthCount: NumberDateRanged!
  totalCount: Int!
  averageDuration: Int!

  """평가자 기준으로 준 평균 점수 입니다."""
  averageFinalMark: Float!

  """피평가자가 작성한 리뷰의 평균 길이 입니다."""
  averageFeedbackLength: Int!

  """평가자가 작성한 리뷰의 평균 길이 입니다."""
  averageCommentLength: Int!
  userProfile: UserProfile!
}

type ProjectInfo {
  id: ID!
  name: String!
  skills: [String]!
  averagePassFinalmark: Int!
  averageDurationTime: Int!

  """총 제출 횟수 입니다."""
  totalCloseCnt: Int!
  currRegisteredCnt: Int!
  passPercentage: Int!
  totalEvalCnt: Int!
}

type ValueRecord {
  at: DateTime!
  value: Int!
}

type ValuePerCircle {
  circle: Int!
  value: Int!
}

type UserCntPerLevel {
  userCnt: Int!
  level: Int!
}

type Total {
  activeUserCntRecords: [ValueRecord!]!
  blackholedCntPerCircles: [ValuePerCircle!]!
  correctionPointRanks: [UserRanking!]!
  walletRanks: [UserRanking!]!
  averageCircleDurations: [ValuePerCircle!]!
  userCntPerLevels: [UserCntPerLevel!]!
  projectInfo(projectName: String! = "libft"): ProjectInfo!
  totalScores: [CoalitionScore!]!
  scoreRecords: [CoalitionScoreRecords!]!
  monthlyScoreRanks: UserRankingDateRanged!
  totalEvalCount: Int!
  averageFeedbackLength: Int!
  averageCommentLength: Int!
}

type CoalitionScore {
  coalition: Coalition!
  value: Int!
}

type CoalitionScoreRecords {
  coalition: Coalition!
  records: [ValueRecord]!
}

type Query {
  findProjectPreview(name: String! = ""): [ProjectPreview]!
  getHomePage: Home!
  getTotalPage: Total!
  getPersonGeneralPage: PersonalGeneral!
  getPersonalEvalPage(uid: Int!): PersonalEval!
  getEvalLogs(pageSize: Int! = 10, pageNumber: Int! = 1, corrector: String, corrected: String, projectName: String, outstandingOnly: Boolean! = false): EvalLogsPaginated!
}