# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UserProject {
  id: Int!
  occurrence: Int!
  markedAt: String
  createdAt: String!
  finalMark: Int
  validated: Boolean
  status: String!
  currentTeamId: Int!
  marked: Boolean!
  projectId: Int!
  projectName: String!
  cursusId: Int!
}

type UserTitle {
  id: Int!
  name: String!
  createdAt: String!
  updatedAt: String!
  selected: Boolean!
}

"""single User model"""
type User {
  id: Int!
  login: String!
  imageUrl: String
  grade: String!
  level: Float!
  beginAt: String!
  blackholedAt: String
  wallet: Int!
  correctionPoint: Int!
  titles: [UserTitle]!
  projects: [UserProject]!
  teams: [Team]!
}

type TeamUserSpecific {
  id: ID!
  login: String!
  isLeader: Boolean!
  occurrence: Int!
  projectUserId: ID!
}

type TeamUserPopulated {
  id: Int!
  login: String!
  imageUrl: String
  grade: String!
  level: Float!
  beginAt: String!
  blackholedAt: String
  wallet: Int!
  correctionPoint: Int!
  titles: [UserTitle]!
  projects: [UserProject]!
  isLeader: Boolean!
  occurrence: Int!
  projectUserId: ID!
}

type ScaleTeamTeamPartial {
  id: ID!
  name: String!
  finalMark: Int
  projectId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  status: String!
  terminatingAt: DateTime
  teamUsers: [TeamUserSpecific!]!
  isLocked: Boolean!
  isClosed: Boolean!
  isValidated: Boolean
  lockedAt: DateTime
  closedAt: DateTime
  projectSessionId: ID!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type ScaleTeamUserPartial {
  id: Int!
  login: String!
}

type TeamScaleTeamPartial {
  id: ID!
  scaleId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!

  """평가 슬롯의 시작 시간 입니다. 실제 시작 시간은 다를 수 있습니다."""
  beginAt: DateTime!
  filledAt: DateTime
  finalMark: Int
  flag: String!

  """평가 시간 전에는 null이 반환됩니다."""
  correcteds: [ScaleTeamUserPartial!]

  """피평가자들의 feedback 입니다."""
  feedback: String

  """평가 시간 전에는 null이 반환됩니다."""
  corrector: ScaleTeamUserPartial

  """평가자의 comment 입니다."""
  comment: String
}

type Team {
  id: ID!
  name: String!
  finalMark: Int
  projectId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  status: String!
  terminatingAt: DateTime
  teamUsers: [TeamUserSpecific!]!
  isLocked: Boolean!
  isClosed: Boolean!
  isValidated: Boolean
  lockedAt: DateTime
  closedAt: DateTime
  projectSessionId: ID!
  teamScaleTeamsPartial: [TeamScaleTeamPartial]!
  teamUserPopulated: [TeamUserPopulated!]!
}

type TeamEdge {
  cursor: String!
  node: Team!
}

type TeamPageInfo {
  hasNextPage: Boolean!
  endCursor: String!
}

type TeamPaginated {
  edges: [TeamEdge!]
  totalCount: Int!
  pageInfo: TeamPageInfo!
}

type TeamPopulated {
  id: ID!
  name: String!
  finalMark: Int
  projectId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  status: String!
  terminatingAt: DateTime
  teamUsers: [TeamUserSpecific!]!
  isLocked: Boolean!
  isClosed: Boolean!
  isValidated: Boolean
  lockedAt: DateTime
  closedAt: DateTime
  projectSessionId: ID!
  teamScaleTeamsPartial: [TeamScaleTeamPartial]!
}

type GraphResultPeriodic {
  first: Int!
  after: DateTime!
  value: [Int]!
}

type ScaleTeam {
  id: ID!
  scaleId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!

  """평가 슬롯의 시작 시간 입니다. 실제 시작 시간은 다를 수 있습니다."""
  beginAt: DateTime!
  filledAt: DateTime
  finalMark: Int
  flag: String!

  """평가 시간 전에는 null이 반환됩니다."""
  correcteds: [ScaleTeamUserPartial!]

  """피평가자들의 feedback 입니다."""
  feedback: String

  """평가 시간 전에는 null이 반환됩니다."""
  corrector: ScaleTeamUserPartial

  """평가자의 comment 입니다."""
  comment: String
  scales: String!
  scaleTeamTeamPartial: ScaleTeamTeamPartial!
  teamPopulated: TeamPopulated!
}

type ScaleTeamsGraph {
  """인자에 맞는 평가의 총 개수를 반환합니다."""
  totalCount: Int!

  """평가자의 comment, 피평가자의 feedback을 모두 포함합니다."""
  averageFeedbackLength: Int!

  """기간 별 평가의 개수를 배열로 반환합니다."""
  periodicCount: GraphResultPeriodic!
}

type Query {
  user(id: Int!): User!
  getTeamById(id: ID!): Team
  getTeams(first: Int! = 10, after: String! = "0", filter: GetTeamsFilter, range: GetTeamsRange, sort: GetTeamsSort): TeamPaginated!
  getScaleTeamById(id: ID!): ScaleTeam
  getScaleTeams(first: Int! = 10, after: String! = "0", filter: GetScaleTeamsFilter, range: GetScaleTeamsRange, sort: GetScaleTeamsSort): [ScaleTeam]!
  getScaleTeamsGraph(filter: GetScaleTeamsFilter, range: GetScaleTeamsRange, period: GraphArgsPeriodic! = {}): ScaleTeamsGraph!
}

input GetTeamsFilter {
  isLocked: Boolean
  isValidated: Boolean
  isMarked: Boolean
}

input GetTeamsRange {
  beginAtRange: DateRangeInput
  finalMarkRange: NumericInput
}

input DateRangeInput {
  start: DateTime
  end: DateTime
}

input NumericInput {
  start: Int
  end: Int
}

input GetTeamsSort {
  order: SortOrder!
  key: GetTeamsSortKey!
}

enum SortOrder {
  ASC
  DESC
}

enum GetTeamsSortKey {
  FINAL_MARK
}

input GetScaleTeamsFilter {
  userId: Int
  createdAt: DateTime
  beginAt: DateTime
  finalMark: Int
  isFilled: Boolean
}

input GetScaleTeamsRange {
  createdAtRange: DateRangeInput
  beginAtRange: DateRangeInput
  finalMarkRange: NumericInput
}

input GetScaleTeamsSort {
  order: SortOrder!
  key: GetScaleTeamsSortKey!
}

enum GetScaleTeamsSortKey {
  FINAL_MARK
  CORRECTOR_ID
  CORRECTEDS_LEADER_ID
  CREATED_AT
  BEGIN_AT
  TEAM_ID
}

input GraphArgsPeriodic {
  """graph의 결과를 해당 값 만큼 반환합니다."""
  first: Int

  """graph의 결과를 해당 날짜의 값을 배열의 시작점으로 반환합니다."""
  after: DateTime
  interval: GraphInterval! = MONTH
}

enum GraphInterval {
  DAY
  WEEK
  MONTH
  YEAR
}