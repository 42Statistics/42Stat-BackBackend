# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UserProject {
  id: Int!
  occurrence: Int!
  markedAt: String
  createdAt: String!
  finalMark: Int
  validated: Boolean
  status: String!
  currentTeamId: Int!
  marked: Boolean!
  projectId: Int!
  projectName: String!
  cursusId: Int!
}

type UserTitle {
  id: Int!
  name: String!
  createdAt: String!
  updatedAt: String!
  selected: Boolean!
}

"""single User model"""
type User {
  id: Int!
  login: String!
  imageUrl: String
  grade: String!
  level: Float!
  beginAt: String!
  blackholedAt: String
  wallet: Int!
  correctionPoint: Int!
  titles: [UserTitle]!
  projects: [UserProject]!
}

type TeamScaleTeam {
  id: ID!
  scaleId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  feedback: String
  finalMark: Int
  flag: String!
  beginAt: DateTime!
  correcteds: String!
  corrector: String!
  filledAt: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type TeamUser {
  id: ID!
  login: String!
  leader: Boolean!
  occurrence: Int!
  projectUserId: ID!
}

type Team {
  id: ID!
  name: String!
  finalMark: Int
  projectId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  status: String!
  terminatingAt: DateTime
  teamUsers: [TeamUser!]!
  isLocked: Boolean!
  isValidated: Boolean
  isClosed: Boolean!
  lockedAt: DateTime
  closedAt: DateTime
  projectSessionId: ID!
  teamScaleTeams: [TeamScaleTeam]!
}

type Query {
  user(id: Int!): User!
  getTeamById(id: ID!): Team!
  getTeams(offset: Int! = 0, limit: Int! = 10, filter: GetTeamsFilter, range: GetTeamsRange, sort: GetTeamsSort): [Team]!
}

input GetTeamsFilter {
  isLocked: Boolean
  isValidated: Boolean
  isMarked: Boolean
}

input GetTeamsRange {
  beginAtRange: DateRangeInput
  finalMarkRange: NumericInput
}

input DateRangeInput {
  start: DateTime
  end: DateTime
}

input NumericInput {
  start: Int
  end: Int
}

input GetTeamsSort {
  order: SortOrder!
  key: GetTeamsSortKey!
}

enum SortOrder {
  ASC
  DESC
}

enum GetTeamsSortKey {
  FINAL_MARK
}