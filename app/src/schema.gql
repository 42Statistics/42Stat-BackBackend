# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ProjectPreview {
  id: ID!
  name: String!
  url: URL!
}

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

type TeamPreview {
  id: ID!
  name: String!
  url: URL!
}

type Corrector {
  id: ID!
  login: String!
  imgUrl: URL
  comment: String!

  """피평가자가 평가자에게 5점 만점 중 몇 점을 주었는가 입니다."""
  correctorRate: Int!
}

type Corrected {
  id: ID!
  login: String!
  imgUrl: URL
  isLeader: Boolean!
}

type Flag {
  id: ID!
  name: String!
  isPositive: Boolean!
}

type PersonalEvalInfo {
  corrector: Corrector!
  correcteds: [Corrected!]!

  """피평가자의 피드백 입니다."""
  feedback: String!
  beginAt: DateTime!
  finalMark: Int!
  flag: Flag!
  projectPreview: ProjectPreview!
  teamPreview: TeamPreview!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type PersonalEvalInfoEdge {
  cursor: String!
  node: PersonalEvalInfo!
}

type PersonalEvalInfoPageInfo {
  hasNextPage: Boolean!
  endCursor: String!
}

type PersonalEvalInfoPaginated {
  edges: [PersonalEvalInfoEdge!]
  totalCount: Int!
  pageInfo: PersonalEvalInfoPageInfo!
}

type TempTeam {
  id: ID!
  name: String!
  occurrence: Int!
  closedAt: DateTime
  firstCreatedAt: DateTime!
  finalMark: Int

  """true면 통과, false면 fail, null이면 미평가 입니다."""
  isValidated: Boolean
}

type PreferredTime {
  morning: Int!
  daytime: Int!
  evening: Int!
  night: Int!
}

type LogtimeInfo {
  currMonthLogtime: Int!
  lastMonthLogtime: Int!
  preferredTime: PreferredTime!
  preferredCluster: String!
}

type TeamInfo {
  lastRegistered: String
  lastPassed: String
  teams: [TempTeam]!
}

type DestinyUser {
  id: ID!
  login: String!
  imgUrl: URL
  score: Int!
}

type EvalUserInfo {
  totalEvalCnt: Int!
  difficulty: EvalUserDifficulty!
  destinyUsers: [DestinyUser]!
}

enum EvalUserDifficulty {
  EASY
  MEDIUM
  HARD
  HELL
}

type LevelHistory {
  date: DateTime!
  level: Float!
}

type PersonalGeneral {
  evalUserInfo: EvalUserInfo!
  logtimeInfo: LogtimeInfo!
  teamInfo: TeamInfo!
  levelHistory: LevelHistory!
  userInfo: UserInfo!
}

type UserTitle {
  id: ID!
  name: String!
  isSelected: Boolean!
}

type ScoreInfo {
  current: Int!
  rankInCoalition: Int!
  rankInTotal: Int!
}

type UserInfo {
  id: ID!
  login: String!
  name: String!
  imgUrl: String!
  userTitles: [UserTitle]!
  level: Float!
  pooledAt: DateTime!
  blackholedAt: DateTime
  wallet: Int!
  correctionPoint: Int!
  scoreInfo: ScoreInfo!
}

type EvalStat {
  currMonthEvalCnt: Int!
  lastMonthEvalCnt: Int!
  averageEvalDuration: Int!

  """평가자 기준으로 준 평균 점수 입니다."""
  averageFinalMark: Float!

  """평가자, 피평가자 모두 포함해서 계산된 값 입니다."""
  averageFeedbackLength: Int!
}

type PersonalEval {
  evalStat: EvalStat!
  evalInfos(evalUserType: EvalUserEnum! = ANY, subjectName: String, targetUserName: String, outstandingOnly: Boolean): PersonalEvalInfoPaginated!
  userInfo: UserInfo!
}

enum EvalUserEnum {
  ANY
  CORRECTOR
  CORRECTED
}

type Ranking {
  rank: Int!
  value: Float!
  userName: String!
  profileUrl: URL!
}

type ProjectRanking {
  rank: Int!
  value: Float!
  projectName: String!
}

type LastExamInfo {
  rank: Int!
  passCnt: Int!
  total: Int!
}

type Home {
  currWeekEvalCnt: Int!
  lastWeekEvalCnt: Int!
  lastMonthBlackholedCnt: Int!
  currMonthBlackholedCnt: Int!
  currRegisteredCntRank: [ProjectRanking!]!
  monthlyExpIncrementRank: [Ranking!]!
  monthlyAccessTimeRank: [Ranking!]!
  totalEvalCntRank: [Ranking!]!
  levelRank: [Ranking!]!
  lastExamPassRate: [LastExamInfo!]!
}

type Record {
  At: DateTime!
  value: Int!
}

type BlackholeCircle {
  circle: Int!
  value: Int!
}

type TotalScore {
  coalitionName: CoaliltionName!
  score: Int!
}

enum CoaliltionName {
  GUN
  GON
  GAM
  LEE
}

type ProjectInfo {
  name: String!
  url: URL!
  skills: [Int!]!
  averagePassFinalmark: Int!
  averageDurationTime: Int!
  totalSubmissionsCnt: Int!
  currRegisteredCnt: Int!
  passPercentage: Int!
  totalEvalCnt: Int!
}

type DurationDayPerCircle {
  circle: Int!
  durationDay: Int!
}

type ScoreRecords {
  coalitionName: CoaliltionName!
  records: [Record!]!
}

type UserCntPerPoint {
  userCnt: Int!
  point: Int!
}

type EvalCntPerPoint {
  evalCnt: Int!
  point: Int!
}

type UserCntPerLevel {
  userCnt: Int!
  level: Int!
}

type Total {
  activeUserCnt: [Record!]!
  blackholeCircle: [BlackholeCircle!]!
  totalScore: [TotalScore!]!
  evalPointRank: [Ranking!]!
  walletRank: [Ranking!]!
  monthlyScoreRank: [Ranking!]!
  totalEvalCnt: Int!
  averageFeedbackLength: Int!
  durationDayPerCircle: [DurationDayPerCircle!]!
  scoreRecords: [ScoreRecords!]!
  userCntPerPoint: [UserCntPerPoint!]!
  evalCntPerPoint: [EvalCntPerPoint!]!
  userCntPerLevel: [UserCntPerLevel!]!
  ProjectInfo(projectName: String! = "libft"): [ProjectInfo!]!
}

type Query {
  getPersonalEvalPage: PersonalEval!
  getPersonGeneralPage: PersonalGeneral!
  getHomePage: Home!
  getTotalPage: Total!
}